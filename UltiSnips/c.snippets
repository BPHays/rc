###########################################################################
#                            TextMate Snippets                            #
########################################################################### ###############################################################################
# PREPROCESSOR DIRECTIVES
###############################################################################

snippet def "#define ..." 
#define ${1} 
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* $1 */
endsnippet

###############################################################################
# DEBUG
###############################################################################

# macros to help with debugging
snippet dbgdef
#define DEBUG_PRINT(x) fprintf(stderr, "%s\n", (x));
#define DEBUG_PRINT_FLAG(f, x) if (f) DEBUG_PRINT(x)
#define FREE(x) free((x)); (x) = NULL;
endsnippet

snippet dbg
DEBUG_PRINT($1)
endsnippet

snippet dbgf
DEBUG_PRINT_FLAG($1, $2)
endsnippet

#####################################################################
# CONTROL FLOW
###############################################################################

###############################################################################
# FOR
###############################################################################
snippet for "generic for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet forimm "for int loop counting down"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:--$2}) {
	${VISUAL}${0}
}
endsnippet

snippet forl "for loop on a list"
for (${1:node *} ${2:n} = ${3:list->head}; $2 != Null; ${4:$2 = $2->next}) {
	${VISUAL}${0}
}
endsnippet

###############################################################################
# WHILE
###############################################################################

snippet while
while ($1) {
	${VISUAL}${0}
}
endsnippet

snippet dowhile
do {
	${VISUAL}${0}
} while ($1)
endsnippet

###############################################################################
# CONDITIONAL
###############################################################################

snippet if 
if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}${0}
}
endsnippet

snippet else "else"
else {
	${VISUAL}${0}
}
endsnippet

snippet tern
$1 ? $2 : $3
endsnippet

snippet switch
switch($1) {
	${VISUAL}${0}
}
endsnippet

snippet case
case $1:
	${VISUAL}${0}
	${2:break;}
endsnippet

###############################################################################
# FUNCTIONS
###############################################################################

###############################################################################
# COMMON FUNCTIONS
###############################################################################

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet malloc 
$1 * $2 = malloc($3${4:`!p 
if t[1] != 'char':
	snip.rv = ' * sizeof(%s)' % t[1]
else:
	snip.rv = ""
`});
endsnippet

#${4: `!p
#	if t[1] != 'char':
#		snip.rv = ' * sizeof(%s)' % t[1]
#`});
snippet realloc
realloc($1 ${2: * sizeof($3)});
endsnippet

snippet resize
if (${1:size} == ${2:maxSize}) {
	$2 *= 2;
	$3 = realloc($2 * sizeof(*$3));
}
endsnippet

snippet syscheck
if (${1:ret} < 0) {
	perror("$2");
}
endsnippet

################################################################################
# GENERIC SNIPPETS
################################################################################ 
snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet fn "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet dec "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

###############################################################################
# MISC
###############################################################################

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet tst "typedef a struct" b
typedef struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
} $1;
endsnippet
